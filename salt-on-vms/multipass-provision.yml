---
- name: Provision and Configure Salt Stack VMs with Multipass
  hosts: localhost
  gather_facts: true
  vars:
    # Salt Stack VM Configuration
    vms:
      - name: "salt-master"
        cpus: 2
        memory: "2G"
        disk: "15G"
        image: "22.04"
        role: "master"
        packages:
          - curl
          - wget
          - gnupg
          - htop
          - vim
          - tree
      - name: "salt-minion-01"
        cpus: 1
        memory: "1G"
        disk: "10G"
        image: "22.04"
        role: "minion"
        packages:
          - curl
          - wget
          - gnupg
          - htop
          - vim
      - name: "salt-minion-02"
        cpus: 1
        memory: "1G"
        disk: "10G"
        image: "22.04"
        role: "minion"
        packages:
          - curl
          - wget
          - gnupg
          - htop
          - vim
      - name: "salt-minion-03"
        cpus: 1
        memory: "1G"
        disk: "10G"
        image: "22.04"
        role: "minion"
        packages:
          - curl
          - wget
          - gnupg
          - htop
          - vim

    # SSH key path and Salt configuration
    ssh_key_path: "{{ ansible_env.HOME }}/.ssh/multipass_key"
    salt_version: "3006"  # SaltStack version

  tasks:
    - name: Check if Multipass is installed
      command: multipass version
      register: multipass_check
      ignore_errors: true
      changed_when: false

    - name: Fail if Multipass is not installed
      fail:
        msg: "Multipass is not installed. Please install it first."
      when: multipass_check.rc != 0

    - name: Generate SSH key pair if it doesn't exist
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        size: 2048
        comment: "multipass-ansible-key"
        force: false

    - name: Create Multipass VMs
      shell: |
        multipass launch {{ item.image }} \
          --name {{ item.name }} \
          --cpus {{ item.cpus }} \
          --memory {{ item.memory }} \
          --disk {{ item.disk }}
      loop: "{{ vms }}"
      register: vm_creation
      ignore_errors: true

    - name: Check VM creation results
      debug:
        msg: "VM {{ item.item.name }}: {{ 'Created' if item.rc == 0 else 'Already exists or failed' }}"
      loop: "{{ vm_creation.results }}"

    - name: Wait for VMs to be ready
      shell: multipass info {{ item.name }}
      loop: "{{ vms }}"
      register: vm_info
      until: "'Running' in vm_info.stdout"
      retries: 30
      delay: 5

    - name: Get VM IP addresses
      shell: multipass info {{ item.name }} --format json
      loop: "{{ vms }}"
      register: vm_info_json
      changed_when: false

    - name: Extract IP addresses and identify Salt master
      set_fact:
        vm_ips: "{{ vm_ips | default({}) | combine({item.item.name: (item.stdout | from_json).info[item.item.name].ipv4[0]}) }}"
      loop: "{{ vm_info_json.results }}"

    - name: Set Salt master IP
      set_fact:
        salt_master_ip: "{{ vm_ips['salt-master'] }}"

    - name: Display Salt Stack environment information
      debug:
        msg: |
          Salt Master: {{ salt_master_ip }}
          Salt Minions:
          {% for vm_name, vm_ip in vm_ips.items() %}
          {% if vm_name != 'salt-master' %}
          - {{ vm_name }}: {{ vm_ip }}
          {% endif %}
          {% endfor %}

    - name: Copy SSH public key to VMs
      shell: |
        multipass exec {{ item.name }} -- bash -c "
          mkdir -p ~/.ssh &&
          echo '{{ lookup('file', ssh_key_path + '.pub') }}' >> ~/.ssh/authorized_keys &&
          chmod 700 ~/.ssh &&
          chmod 600 ~/.ssh/authorized_keys
        "
      loop: "{{ vms }}"

    - name: Update package cache on VMs
      shell: multipass exec {{ item.name }} -- sudo apt update
      loop: "{{ vms }}"

    - name: Install basic packages on VMs
      shell: multipass exec {{ item.name }} -- sudo apt install -y {{ item.packages | join(' ') }}
      loop: "{{ vms }}"
      when: item.packages is defined

    - name: Configure DNS and fix networking issues in VMs
      shell: |
        multipass exec {{ item.name }} -- bash -c "
          # Backup original configuration
          sudo cp /etc/resolv.conf /etc/resolv.conf.backup || true
          
          # Configure DNS servers
          echo 'nameserver 8.8.8.8' | sudo tee /etc/resolv.conf
          echo 'nameserver 8.8.4.4' | sudo tee -a /etc/resolv.conf
          echo 'nameserver 1.1.1.1' | sudo tee -a /etc/resolv.conf
          
          # Disable systemd-resolved temporarily
          sudo systemctl stop systemd-resolved || true
          
          # Test basic connectivity
          ping -c 2 8.8.8.8 || echo 'Warning: Cannot ping 8.8.8.8'
        "
      loop: "{{ vms }}"
      register: dns_config
      ignore_errors: true

    - name: Install SaltStack from Ubuntu repositories (reliable method)
      shell: |
        multipass exec {{ item.name }} -- bash -c "
          # Enable universe repository
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe -y
          sudo apt update
          
          # Install ca-certificates for secure connections
          sudo apt install -y ca-certificates apt-transport-https
        "
      loop: "{{ vms }}"
      register: ubuntu_repo_setup

    - name: Install Salt Master from Ubuntu repositories
      shell: |
        multipass exec salt-master -- bash -c "
          sudo apt install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api
          
          # Verify installation
          salt-master --version || echo 'Salt master installation verification failed'
        "
      register: salt_master_install

    - name: Install Salt Minion on minion nodes from Ubuntu repositories
      shell: |
        multipass exec {{ item.name }} -- bash -c "
          sudo apt install -y salt-minion
          
          # Verify installation
          salt-minion --version || echo 'Salt minion installation verification failed'
        "
      loop: "{{ vms }}"
      when: item.role == "minion"
      register: salt_minion_install

    - name: Display Salt installation results
      debug:
        msg: |
          Salt installation completed using Ubuntu repositories.
          This provides a stable, tested version of SaltStack.
          Note: This may be an older version than the latest SaltProject release.

    - name: Apply Salt Master configuration
      shell: |
        multipass exec salt-master -- bash -c "
          sudo mkdir -p /etc/salt/master.d
          sudo mkdir -p /srv/salt/states /srv/salt/pillar
          
          # Create master configuration directly on the VM
          cat << 'EOF' | sudo tee /etc/salt/master.d/99-custom.conf
          interface: {{ salt_master_ip }}
          auto_accept: True
          file_roots:
            base:
              - /srv/salt/states
          pillar_roots:
            base:
              - /srv/salt/pillar
          log_level: info
          EOF
          
          sudo systemctl restart salt-master
          sudo systemctl enable salt-master
        "

    - name: Configure Salt Minions
      shell: |
        multipass exec {{ item.name }} -- bash -c "
          sudo mkdir -p /etc/salt/minion.d
          echo 'master: {{ salt_master_ip }}' | sudo tee /etc/salt/minion.d/99-custom.conf
          echo 'id: {{ item.name }}' | sudo tee -a /etc/salt/minion.d/99-custom.conf
          echo 'log_level: info' | sudo tee -a /etc/salt/minion.d/99-custom.conf
          sudo systemctl restart salt-minion
          sudo systemctl enable salt-minion
        "
      loop: "{{ vms }}"
      when: item.role == "minion"

    - name: Wait for minions to connect
      pause:
        seconds: 15
        prompt: "Waiting for Salt minions to connect to master..."

    - name: Accept all minion keys on master
      shell: |
        multipass exec salt-master -- sudo salt-key -A -y

    - name: Create Salt states directory
      shell: |
        multipass exec salt-master -- sudo mkdir -p /srv/salt/states /srv/salt/pillar

    - name: Create common Salt state file (simple approach)
      shell: |
        multipass exec salt-master -- sudo tee /srv/salt/states/common.sls << 'EOF'
        common_packages:
          pkg.installed:
            - names:
              - vim
              - git
              - htop
              - curl
              - wget
              - tree

        motd_file:
          file.managed:
            - name: /etc/motd
            - contents: |
                Welcome to Salt Minion
                Managed by SaltStack
                
        ntp_service:
          service.running:
            - name: systemd-timesyncd
            - enable: True
        EOF

    - name: Create top.sls state file
      shell: |
        multipass exec salt-master -- sudo tee /srv/salt/states/top.sls << 'EOF'
        base:
          '*':
            - common
        EOF

    - name: Create pillar common file
      shell: |
        multipass exec salt-master -- sudo tee /srv/salt/pillar/common.sls << 'EOF'
        environment: development
        users:
          admin:
            fullname: System Administrator
            shell: /bin/bash
        EOF

    - name: Create pillar top.sls file
      shell: |
        multipass exec salt-master -- sudo tee /srv/salt/pillar/top.sls << 'EOF'
        base:
          '*':
            - common
        EOF

    - name: Create dynamic inventory file for Salt environment
      copy:
        content: |
          [salt_master]
          salt-master ansible_host={{ salt_master_ip }} ansible_user=ubuntu ansible_ssh_private_key_file={{ ssh_key_path }}

          [salt_minions]
          {% for vm_name, vm_ip in vm_ips.items() %}
          {% if vm_name != 'salt-master' %}
          {{ vm_name }} ansible_host={{ vm_ip }} ansible_user=ubuntu ansible_ssh_private_key_file={{ ssh_key_path }}
          {% endif %}
          {% endfor %}

          [salt_stack:children]
          salt_master
          salt_minions

          [salt_stack:vars]
          ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          salt_master_ip={{ salt_master_ip }}
        dest: "./salt_inventory.ini"

    - name: Create Salt Stack management script
      copy:
        content: |
          #!/bin/bash
          # Salt Stack Environment Management Script

          SALT_MASTER_IP="{{ salt_master_ip }}"
          SSH_KEY="{{ ssh_key_path }}"

          case "$1" in
            start)
              echo "Starting all Salt VMs..."
              multipass start salt-master salt-minion-01 salt-minion-02 salt-minion-03
              ;;
            stop)
              echo "Stopping all Salt VMs..."
              multipass stop salt-master salt-minion-01 salt-minion-02 salt-minion-03
              ;;
            delete)
              echo "Deleting all Salt VMs..."
              multipass delete salt-master salt-minion-01 salt-minion-02 salt-minion-03
              multipass purge
              ;;
            status)
              multipass list
              echo ""
              echo "Salt Master IP: $SALT_MASTER_IP"
              ;;
            ssh)
              if [ -z "$2" ]; then
                echo "Usage: $0 ssh <vm_name>"
                echo "Available VMs:"
                echo "  - salt-master"
                echo "  - salt-minion-01"
                echo "  - salt-minion-02"
                echo "  - salt-minion-03"
              else
                ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$(multipass info $2 --format json | jq -r '.info."'$2'".ipv4[0]')
              fi
              ;;
            salt-status)
              echo "Checking Salt Stack status..."
              ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$SALT_MASTER_IP "sudo salt-key -L"
              ;;
            test-salt)
              echo "Testing Salt connectivity..."
              ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$SALT_MASTER_IP "sudo salt '*' test.ping"
              ;;
            salt-cmd)
              if [ -z "$2" ]; then
                echo "Usage: $0 salt-cmd '<salt command>'"
                echo "Example: $0 salt-cmd 'grains.items'"
              else
                ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$SALT_MASTER_IP "sudo salt '*' $2"
              fi
              ;;
            apply-states)
              echo "Applying Salt states to all minions..."
              ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$SALT_MASTER_IP "sudo salt '*' state.apply"
              ;;
            *)
              echo "Usage: $0 {start|stop|delete|status|ssh <vm_name>|salt-status|test-salt|salt-cmd '<command>'|apply-states}"
              echo ""
              echo "Salt-specific commands:"
              echo "  salt-status  - Show accepted/rejected minion keys"
              echo "  test-salt    - Test connectivity to all minions"
              echo "  salt-cmd     - Run salt command on all minions"
              echo "  apply-states - Apply all Salt states"
              exit 1
              ;;
          esac
        dest: "./manage_salt_vms.sh"
        mode: '0755'

    - name: Test Salt connectivity
      shell: |
        multipass exec salt-master -- sudo salt '*' test.ping
      register: salt_test
      ignore_errors: true

    - name: Display Salt Stack completion message
      debug:
        msg: |
          🧂 Salt Stack environment provisioned successfully!

          📋 Environment Information:
          - Salt Master: {{ salt_master_ip }}
          {% for vm_name, vm_ip in vm_ips.items() %}
          {% if vm_name != 'salt-master' %}
          - {{ vm_name }}: {{ vm_ip }}
          {% endif %}
          {% endfor %}

          📁 Files created:
          - SSH key: {{ ssh_key_path | expanduser }}
          - Inventory: ./salt_inventory.ini
          - Management script: ./manage_salt_vms.sh

          🧂 Salt Commands:
          - Test connectivity: ./manage_salt_vms.sh test-salt
          - Check minions: ./manage_salt_vms.sh salt-status
          - Run command: ./manage_salt_vms.sh salt-cmd 'cmd.run "uptime"'
          - Apply states: ./manage_salt_vms.sh apply-states

          🚀 Next steps:
          - SSH to master: ./manage_salt_vms.sh ssh salt-master
          - Run Salt states: ./manage_salt_vms.sh apply-states
          - Manage VMs: ./manage_salt_vms.sh {start|stop|status}

          💡 Running Salt commands without sudo:
          After SSH'ing to salt-master, you can run Salt commands directly:
          - salt '*' test.ping
          - salt-key -L
          - salt '*' cmd.run 'uptime'
          
          Note: Commands work via sudoers rule with shell aliases.
          No need to run 'newgrp' or logout/login.

          {% if salt_test.rc == 0 %}
          ✅ Salt connectivity test: PASSED
          {{ salt_test.stdout }}
          {% else %}
          ⚠️  Salt connectivity test: Check manually with './manage_salt_vms.sh test-salt'
          {% endif %}

          📝 Note: Installed Salt from Ubuntu repositories to avoid network issues.
          This provides a stable version, though it may be older than the latest release.
