---
# Comprehensive Kubernetes Cluster Testing Playbook
# Tests all major functionality of your new K8s cluster

- name: Kubernetes Cluster Health Check and Testing
  hosts: master
  become: yes
  vars:
    kubeconfig: "/root/.kube/config"
    test_namespace: "cluster-test"
    
  tasks:
    - name: Basic Cluster Status Checks
      block:
        - name: Check cluster info
          command: kubectl cluster-info
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: cluster_info
          
        - name: Display cluster info
          debug:
            msg: "{{ cluster_info.stdout_lines }}"
            
        - name: Get all nodes status
          command: kubectl get nodes -o wide
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: nodes_status
          
        - name: Display nodes status
          debug:
            msg: "{{ nodes_status.stdout_lines }}"
            
        - name: Verify all nodes are Ready
          shell: kubectl get nodes --no-headers | grep -v Ready | wc -l
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: not_ready_nodes
          failed_when: not_ready_nodes.stdout != "0"
          
        - name: Check system pods status
          command: kubectl get pods -n kube-system -o wide
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: system_pods
          
        - name: Display system pods
          debug:
            msg: "{{ system_pods.stdout_lines }}"
            
        - name: Verify all system pods are running
          shell: kubectl get pods -n kube-system --no-headers | grep -v Running | grep -v Completed | wc -l
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: failing_pods
          failed_when: failing_pods.stdout != "0"

    - name: Component Health Checks
      block:
        - name: Check component statuses
          command: kubectl get componentstatuses
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: component_status
          ignore_errors: yes
          
        - name: Display component status
          debug:
            msg: "{{ component_status.stdout_lines }}"
          when: component_status.rc == 0
            
        - name: Check API server health
          uri:
            url: "https://{{ ansible_default_ipv4.address }}:6443/healthz"
            validate_certs: no
            client_cert: /etc/kubernetes/pki/apiserver-kubelet-client.crt
            client_key: /etc/kubernetes/pki/apiserver-kubelet-client.key
          register: api_health
          
        - name: API server health status
          debug:
            msg: "API Server Health: {{ api_health.status }} - {{ api_health.content | default('OK') }}"

    - name: Network Testing
      block:
        - name: Create test namespace
          command: kubectl create namespace {{ test_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          ignore_errors: yes
          
        - name: Deploy network test pods
          copy:
            content: |
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: network-test
                namespace: {{ test_namespace }}
              spec:
                replicas: 3
                selector:
                  matchLabels:
                    app: network-test
                template:
                  metadata:
                    labels:
                      app: network-test
                  spec:
                    containers:
                    - name: network-test
                      image: nginx:alpine
                      ports:
                      - containerPort: 80
                      resources:
                        requests:
                          memory: "64Mi"
                          cpu: "50m"
                        limits:
                          memory: "128Mi"
                          cpu: "100m"
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: network-test-service
                namespace: {{ test_namespace }}
              spec:
                selector:
                  app: network-test
                ports:
                - port: 80
                  targetPort: 80
                type: ClusterIP
            dest: /tmp/network-test.yaml
            
        - name: Apply network test deployment
          command: kubectl apply -f /tmp/network-test.yaml
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Wait for network test pods to be ready
          command: kubectl wait --for=condition=ready pod -l app=network-test -n {{ test_namespace }} --timeout=300s
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Test pod-to-pod communication
          shell: |
            POD_NAME=$(kubectl get pods -n {{ test_namespace }} -l app=network-test -o jsonpath='{.items[0].metadata.name}')
            SERVICE_IP=$(kubectl get svc network-test-service -n {{ test_namespace }} -o jsonpath='{.spec.clusterIP}')
            kubectl exec -n {{ test_namespace }} $POD_NAME -- wget -qO- http://$SERVICE_IP
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: pod_communication
          
        - name: Display network test result
          debug:
            msg: "Pod-to-Service communication: {{ 'SUCCESS' if 'nginx' in pod_communication.stdout else 'FAILED' }}"

    - name: Storage Testing
      block:
        - name: Test persistent volume functionality
          copy:
            content: |
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: test-pvc
                namespace: {{ test_namespace }}
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
              ---
              apiVersion: v1
              kind: Pod
              metadata:
                name: storage-test
                namespace: {{ test_namespace }}
              spec:
                containers:
                - name: storage-test
                  image: busybox
                  command: ['sh', '-c', 'echo "Hello Kubernetes" > /data/test.txt && sleep 3600']
                  volumeMounts:
                  - name: test-volume
                    mountPath: /data
                volumes:
                - name: test-volume
                  persistentVolumeClaim:
                    claimName: test-pvc
            dest: /tmp/storage-test.yaml
            
        - name: Apply storage test
          command: kubectl apply -f /tmp/storage-test.yaml
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Wait for storage test pod
          command: kubectl wait --for=condition=ready pod/storage-test -n {{ test_namespace }} --timeout=180s
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          ignore_errors: yes
          
        - name: Test storage functionality
          command: kubectl exec -n {{ test_namespace }} storage-test -- cat /data/test.txt
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: storage_test
          ignore_errors: yes
          
        - name: Display storage test result
          debug:
            msg: "Storage test: {{ 'SUCCESS' if 'Hello Kubernetes' in storage_test.stdout else 'FAILED - ' + storage_test.stderr | default('Unknown error') }}"

    - name: DNS and Service Discovery Testing
      block:
        - name: Test DNS resolution
          shell: |
            POD_NAME=$(kubectl get pods -n {{ test_namespace }} -l app=network-test -o jsonpath='{.items[0].metadata.name}')
            kubectl exec -n {{ test_namespace }} $POD_NAME -- nslookup kubernetes.default.svc.cluster.local
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: dns_test
          
        - name: Display DNS test result
          debug:
            msg: "DNS resolution: {{ 'SUCCESS' if 'kubernetes.default.svc.cluster.local' in dns_test.stdout else 'FAILED' }}"
            
        - name: Test service discovery
          shell: |
            POD_NAME=$(kubectl get pods -n {{ test_namespace }} -l app=network-test -o jsonpath='{.items[0].metadata.name}')
            kubectl exec -n {{ test_namespace }} $POD_NAME -- nslookup network-test-service.{{ test_namespace }}.svc.cluster.local
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: service_discovery
          
        - name: Display service discovery result
          debug:
            msg: "Service discovery: {{ 'SUCCESS' if 'network-test-service' in service_discovery.stdout else 'FAILED' }}"

    - name: Resource Management Testing
      block:
        - name: Deploy resource-constrained pod
          copy:
            content: |
              apiVersion: v1
              kind: Pod
              metadata:
                name: resource-test
                namespace: {{ test_namespace }}
              spec:
                containers:
                - name: resource-test
                  image: busybox
                  command: ['sh', '-c', 'while true; do echo "Resource test running"; sleep 10; done']
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
            dest: /tmp/resource-test.yaml
            
        - name: Apply resource test
          command: kubectl apply -f /tmp/resource-test.yaml
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Wait for resource test pod
          command: kubectl wait --for=condition=ready pod/resource-test -n {{ test_namespace }} --timeout=120s
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          
        - name: Check resource usage
          command: kubectl top pod resource-test -n {{ test_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: resource_usage
          ignore_errors: yes
          
        - name: Display resource usage
          debug:
            msg: "Resource monitoring: {{ 'SUCCESS' if resource_usage.rc == 0 else 'Metrics not available yet' }}"

    - name: Load Balancing and Scaling Test
      block:
        - name: Test horizontal scaling
          command: kubectl scale deployment network-test --replicas=5 -n {{ test_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Wait for scale up
          command: kubectl wait --for=condition=ready pod -l app=network-test -n {{ test_namespace }} --timeout=180s
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          
        - name: Verify pod distribution across nodes
          shell: kubectl get pods -n {{ test_namespace }} -l app=network-test -o wide --no-headers | awk '{print $7}' | sort | uniq -c
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: pod_distribution
          
        - name: Display pod distribution
          debug:
            msg: "Pod distribution across nodes: {{ pod_distribution.stdout_lines }}"
            
        - name: Test load balancing
          shell: |
            SERVICE_IP=$(kubectl get svc network-test-service -n {{ test_namespace }} -o jsonpath='{.spec.clusterIP}')
            for i in {1..10}; do
              POD_NAME=$(kubectl get pods -n {{ test_namespace }} -l app=network-test -o jsonpath='{.items[0].metadata.name}')
              kubectl exec -n {{ test_namespace }} $POD_NAME -- wget -qO- http://$SERVICE_IP | grep -o "Welcome to nginx" || echo "Request $i failed"
            done
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          register: load_balance_test
          
        - name: Display load balancing result
          debug:
            msg: "Load balancing test: {{ load_balance_test.stdout_lines | length }} successful requests"

    - name: NodePort Service Testing
      block:
        - name: Create NodePort service
          copy:
            content: |
              apiVersion: v1
              kind: Service
              metadata:
                name: network-test-nodeport
                namespace: {{ test_namespace }}
              spec:
                type: NodePort
                selector:
                  app: network-test
                ports:
                - port: 80
                  targetPort: 80
                  nodePort: 30080
            dest: /tmp/nodeport-service.yaml
            
        - name: Apply NodePort service
          command: kubectl apply -f /tmp/nodeport-service.yaml
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
            
        - name: Test NodePort access from master
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:30080"
            method: GET
          register: nodeport_test
          ignore_errors: yes
          
        - name: Display NodePort test result
          debug:
            msg: "NodePort service: {{ 'SUCCESS - Status ' + nodeport_test.status|string if nodeport_test.status is defined else 'FAILED - Service not accessible' }}"

    - name: Cleanup and Summary
      block:
        - name: Generate test summary
          set_fact:
            test_summary: |
              =================================================
              KUBERNETES CLUSTER TEST SUMMARY
              =================================================
              
              ✅ Basic Cluster Health: PASSED
              ✅ All Nodes Ready: {{ 'PASSED' if not_ready_nodes.stdout == '0' else 'FAILED' }}
              ✅ System Pods Running: {{ 'PASSED' if failing_pods.stdout == '0' else 'FAILED' }}
              ✅ API Server Health: {{ 'PASSED' if api_health.status == 200 else 'FAILED' }}
              ✅ Pod-to-Service Communication: {{ 'PASSED' if 'nginx' in pod_communication.stdout else 'FAILED' }}
              ✅ Storage Functionality: {{ 'PASSED' if 'Hello Kubernetes' in storage_test.stdout else 'FAILED' }}
              ✅ DNS Resolution: {{ 'PASSED' if 'kubernetes.default.svc.cluster.local' in dns_test.stdout else 'FAILED' }}
              ✅ Service Discovery: {{ 'PASSED' if 'network-test-service' in service_discovery.stdout else 'FAILED' }}
              ✅ Horizontal Scaling: PASSED
              ✅ Load Balancing: {{ 'PASSED' if load_balance_test.stdout_lines | length > 5 else 'PARTIAL' }}
              ✅ NodePort Service: {{ 'PASSED' if nodeport_test.status == 200 else 'FAILED' }}
              
              Cluster Nodes: {{ (nodes_status.stdout_lines | length) - 1 }}
              Active Pods: {{ system_pods.stdout_lines | length - 1 }}
              
              =================================================
              
        - name: Display test summary
          debug:
            msg: "{{ test_summary }}"
            
        - name: Clean up test resources
          command: kubectl delete namespace {{ test_namespace }}
          environment:
            KUBECONFIG: "{{ kubeconfig }}"
          when: cleanup_test_resources | default(true)
          
        - name: Save cluster information
          copy:
            content: |
              # Kubernetes Cluster Information
              Generated: {{ ansible_date_time.iso8601 }}
              
              ## Cluster Access
              Master Node: {{ ansible_default_ipv4.address }}
              API Server: https://{{ ansible_default_ipv4.address }}:6443
              
              ## Nodes
              {{ nodes_status.stdout }}
              
              ## System Pods
              {{ system_pods.stdout }}
              
              ## Test Results Summary
              {{ test_summary }}
              
              ## Useful Commands
              # Get cluster info
              kubectl cluster-info
              
              # Check nodes
              kubectl get nodes -o wide
              
              # Check all pods
              kubectl get pods -A
              
              # Check services
              kubectl get services -A
              
              # Access NodePort service
              curl http://{{ ansible_default_ipv4.address }}:30080
              
              # Monitor cluster
              watch kubectl get pods -A
            dest: ./cluster-info.txt
          delegate_to: localhost
          become: no


