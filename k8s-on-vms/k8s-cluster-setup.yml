---
# Kubernetes Cluster Setup Playbook
# This playbook sets up a complete Kubernetes cluster with 1 master and 3 worker nodes

- name: Common setup for all nodes
  hosts: all
  become: yes
  vars:
    k8s_version: "1.28"
    containerd_version: "1.7.2"
    pod_network_cidr: "10.244.0.0/16"
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - net-tools
          - htop
        state: present

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      changed_when: false

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    - name: Add kernel modules to load at boot
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl for Kubernetes
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Configure containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key
        state: present

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages at current version
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable and start kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Configure kubelet to use correct cgroup driver
      lineinfile:
        path: /etc/default/kubelet
        line: 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd'
        create: yes
      notify: restart kubelet

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

  handlers:
    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted

- name: Initialize Kubernetes master node
  hosts: master
  become: yes
  vars:
    pod_network_cidr: "10.244.0.0/16"
  
  tasks:
    - name: Check if Kubernetes is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_init_stat

    - name: Preflight check for container runtime
      command: crictl version
      environment:
        CONTAINER_RUNTIME_ENDPOINT: unix:///var/run/containerd/containerd.sock
      register: crictl_check
      failed_when: false

    - name: Display crictl status
      debug:
        msg: "Container runtime status: {{ crictl_check.stdout if crictl_check.rc == 0 else 'Failed: ' + crictl_check.stderr }}"

    - name: Initialize Kubernetes cluster
      shell: |
        kubeadm init \
          --pod-network-cidr={{ pod_network_cidr }} \
          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \
          --node-name={{ ansible_hostname }} \
          --cri-socket=unix:///var/run/containerd/containerd.sock \
          --v=5
      when: not k8s_init_stat.stat.exists
      register: kubeadm_init

    - name: Copy kubeconfig to root user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0644'

    - name: Generate join command for worker nodes
      shell: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Save join command to local file
      local_action:
        module: copy
        content: "{{ join_command.stdout_lines[0] }}"
        dest: "./join-command.sh"
        mode: '0755'
      become: no

    - name: Install Flannel CNI plugin
      shell: |
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /root/.kube/config
      when: not k8s_init_stat.stat.exists

    - name: Wait for all system pods to be ready
      shell: kubectl get pods -n kube-system --no-headers | grep -v Running | wc -l
      environment:
        KUBECONFIG: /root/.kube/config
      register: pending_pods
      until: pending_pods.stdout == "0"
      retries: 30
      delay: 10
      changed_when: false

- name: Join worker nodes to cluster
  hosts: workers
  become: yes
  
  tasks:
    - name: Check if node is already part of cluster
      shell: kubectl get nodes | grep {{ ansible_hostname }} || true
      delegate_to: "{{ groups['master'][0] }}"
      register: node_status
      changed_when: false

    - name: Copy join command to worker nodes
      copy:
        src: "./join-command.sh"
        dest: "/tmp/join-command.sh"
        mode: '0755'
      when: ansible_hostname not in node_status.stdout

    - name: Join worker nodes to cluster
      shell: bash /tmp/join-command.sh
      when: ansible_hostname not in node_status.stdout
      register: join_result

    - name: Clean up join command file
      file:
        path: /tmp/join-command.sh
        state: absent

- name: Final cluster verification
  hosts: master
  become: yes
  
  tasks:
    - name: Wait for all nodes to be ready
      shell: kubectl get nodes --no-headers | grep -v Ready | wc -l
      environment:
        KUBECONFIG: /root/.kube/config
      register: not_ready_nodes
      until: not_ready_nodes.stdout == "0"
      retries: 20
      delay: 15
      changed_when: false

    - name: Display cluster status
      shell: kubectl get nodes -o wide
      environment:
        KUBECONFIG: /root/.kube/config
      register: cluster_status
      changed_when: false

    - name: Show cluster information
      debug:
        msg: "{{ cluster_status.stdout_lines }}"

    - name: Display cluster info
      shell: kubectl cluster-info
      environment:
        KUBECONFIG: /root/.kube/config
      register: cluster_info
      changed_when: false

    - name: Show cluster info
      debug:
        msg: "{{ cluster_info.stdout_lines }}"

    - name: Create kubeconfig for regular user (optional)
      block:
        - name: Create user .kube directory
          file:
            path: "/home/{{ ansible_user }}/.kube"
            state: directory
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: '0755'
          when: ansible_user != "root"

        - name: Copy kubeconfig to user directory
          copy:
            src: /etc/kubernetes/admin.conf
            dest: "/home/{{ ansible_user }}/.kube/config"
            remote_src: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: '0644'
          when: ansible_user != "root"

- name: Clean up local files
  hosts: localhost
  connection: local
  become: no
  
  tasks:
    - name: Remove temporary join command file
      file:
        path: "./join-command.sh"
        state: absent

